//修改Tomcat中默认端口号的方法：双击Tomcat图标，打开ports页签，修改HTTP/1.1选项后面的值，重启Tomcat服务器
Spring MVC 是一个模型 - 视图 - 控制器（MVC）的Web框架，建立在中央前端控制器servlet（DispatcherServlet),它负责
发送每个请求到合适的处理程序,使用视图来最终返回响应结果
初始化过程：
  在启动Web项目时，容器(比如Tomcat)会读web.xml配置文件中的两个节点<listener>和<contex-param>。 
  接着容器会创建一个ServletContext(上下文),应用范围内即整个WEB项目都能使用这个上下文。
  接着容器会将读取到<context-param>转化为键值对,并交给ServletContext。
  容器创建<listener></listener>中的类实例,即创建监听（备注：listener定义的类可以是自定义的类但必须需要继承ServletContextListener）。
  在监听的类中会有一个contextInitialized(ServletContextEvent event)初始化方法，在这个方法中可以通过
  event.getServletContext().getInitParameter("contextConfigLocation") 来得到context-param 设定的值。在这个类中还必须有
  一个contextDestroyed(ServletContextEvent event) 销毁方法.用于关闭应用前释放资源，比如说数据库连接的关闭。
  得到这个context-param的值之后,你就可以做一些操作了.注意,这个时候你的WEB项目还没有完全启动完成.这个动作会比所有的Servlet都要早。
  web.xml标签的顺序为：context-param >listener>filter>servlet
  监听器：监听器实际上是一个类，这个类实现了特定的接口，然后将这个类在 web.xml 文件中进行描述，
  这样服务器在启动的时候就可以实例化这个类，启动监听器。
  当范围对象的状态发生变化的时候，服务器自动调用监听器对象中的方法
  spring IOC容器实例化Bean的方式有：
    singleton   在spring IOC容器中仅存在一个Bean实例,Bean以单实例的方式存在.
    prototype   每次从容器中调用Bean时,都返回一个新的实例,即每次调用getBean()时,相当于执行new XxxBean()的操作.
    request   每次HTTP请求都会创建一个新的Bean,该作用域仅适用于webApplicationContext环境.
    session   同一个HTTP session共享一个Bean,不同HTTP session使用不同的Bean,该作用域仅适用于webApplicationContext环境.
    globalSession   同一个全局session共享一个Bean,一般用于portlet应用环境,该作用域仅适用于webApplicationContext环境
 Filter也称之为过滤器，它是Servlet技术中最实用的技术，Web开发人员通过Filter技术，对web服务器管理的所有web资源：例如Jsp, Servlet, 静态图片
 文件或静态 html 文件等进行拦截，从而实现一些特殊的功能。例如实现URL级别的权限访问控制、过滤敏感词汇、压缩响应信息等一些高级功能。它主要用于对用
 户请求进行预处理，也可以对HttpServletResponse进行后处理。使用Filter的完整流程：Filter对用户请求进行预处理，接着将请求交给Servlet进行处理
 并生成响应，最后Filter再对服务器响应进行后处理
 